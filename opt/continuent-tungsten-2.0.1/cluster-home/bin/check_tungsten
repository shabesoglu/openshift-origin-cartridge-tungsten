#!/usr/bin/env ruby
#
# This script runs all Nagios checks and sends an email following errors
#
# The script should be run as the root user to ensure it can send mail
# properly. Export the environment variables before calling the script 
# to modify behavior
#

require "#{File.dirname(__FILE__)}/../lib/ruby/tungsten"

class CheckTungsten
  include TungstenScript
  
  def main
    if @options[:dataservices] == nil
      @options[:dataservices] = TI.dataservices()
    end
    if @options[:subject] == nil
      @options[:subject] = "Error: Problems exist with the Tungsten services on #{TI.hostname()}:#{TI.root()}"
    end
    if @options[:lock_dir] == nil
      @options[:lock_dir] = "#{TI.root()}/share/check_tungsten"
    end
    
    TU.mkdir_if_absent(@options[:lock_dir])
    
    if @options[:reset] == true
      TU.debug("Reset the lock directory")
      FileUtils.rm_f Dir.glob("#{@options[:lock_dir]}/*")
    else
      #Expire old Locks
      TU.info("Deleting Locks older than #{@options[:lock_timeout]} min")
      TU.cmd_result("find #{@options[:lock_dir]}/*.lck -type f -mmin +#{@options[:lock_timeout]} -delete 2>/dev/null", true)
    end
    
    @notices = []
    @status = {}
    @options[:dataservices].each{
      |dsname|
      @status[dsname] = TI.status(dsname)
    }
    
    @checks.each{
      |ch|
      begin
        self.send(ch)
      rescue => e
        TU.debug(e)
        add_notice(ch.to_s(), e.message())
      end
    }
    
    TU.debug("Removing notices that have a lock file")
    @notices.delete_if{
      |notice|
      if File.exists?("#{@options[:lock_dir]}/#{notice[:key]}.lck")
        TU.debug("Lock file found for #{notice[:key]}")
        true
      else
        false
      end
    }
    TU.debug("Removing notices that are ignored")
    @notices.delete_if{
      |notice|
      if @options[:ignore_notices].include?(notice[:key]) || @options[:ignore_notices].include?(notice[:key] + ".lck")
        TU.debug("Ignoring #{notice[:key]}")
        true
      else
        false
      end
    }
    TU.debug("Done removing notices")
    
    if @notices.size() > 0
      TU.debug("There are #{@notices.size()} notices")
      body = Tempfile.new("ctbody")
      @notices.each{
        |notice|
        TU.debug(notice[:msg])
        
        unless notice[:write_lock] == false
          FileUtils.touch("#{@options[:lock_dir]}/#{notice[:key]}.lck")
        end
        body.puts(notice[:msg])
        body.puts("")
        body.puts("------------------------------------------")
        body.puts("")
      }
      
      @options[:dataservices].each{
        |dsname|
        body.puts(@status[dsname].to_s())
        body.puts("")
        body.puts("------------------------------------------")
        body.puts("")
      }
      body.flush()
      
      body.rewind()
      TU.log(body.read())
      
      if @options[:to] != nil
        TU.cmd_result("sudo #{@options[:mail]} -s \"#{@options[:subject]}\" \"#{@options[:to]}\" < #{body.path()}")
      end
      
      cleanup(1)
    else
      cleanup(0)
    end
  end
  
  def check_services()
    if TI.is_replicator?()
      unless TI.is_running?("replicator")
        add_notice("rep_not_running", "Replicator not running on #{TI.hostname()}")
      end
    end
    
    if TI.is_manager?()
      unless TI.is_running?("manager")
        add_notice("mgr_not_running", "Manager not running on #{TI.hostname()}")
      end
    end
    
    if TI.is_connector?()
      unless TI.is_running?("connector")
        add_notice("conn_not_running", "Connector not running on #{TI.hostname()}")
      end
    end
  end
  
  def check_online()
    @options[:dataservices].each{
      |dsname|
      
      TU.debug("Check all resources in #{dsname} are ONLINE")
      status = @status[dsname]
      if status == nil
        add_notice("parse_#{dsname}", "Unable to parse status for the #{dsname} service on #{TI.hostname()}")
        next
      end
      
      unless status.is_replication?()
        if status.policy() != "AUTOMATIC"
          add_notice("policy_#{status.name()}", "The #{status.name()} service is in #{status.policy()} mode on #{TI.hostname()}")
        end
      end
      status.datasources().each{
        |ds|
        if status.datasource_status(ds) != "ONLINE"
          add_notice("datasource_#{status.name()}_#{TU.to_identifier(ds)}_not_online", "Datasource #{status.name()}:#{ds} is not ONLINE [#{status.datasource_status(ds)}] on #{TI.hostname()}")
        end
      }
      status.replicators().each{
        |ds|
        if status.replicator_status(ds) != "ONLINE"
          add_notice("replicator_#{status.name()}_#{TU.to_identifier(ds)}_not_online", "Replicator #{status.name()}:#{ds} is not ONLINE [#{status.replicator_status(ds)}] on #{TI.hostname()}")
        end
      }
    }
  end
  
  def check_latency()
    @options[:dataservices].each{
      |dsname|
      
      TU.debug("Check the latency of datasources in #{dsname}")
      status = @status[dsname]
      if status == nil
        add_notice("parse_#{dsname}", "Unable to parse status for the #{dsname} service on #{TI.hostname()}")
        next
      end
      
      status.datasources().each{
        |ds|
        unless status.replicator_latency(ds) <= @options[:max_slave_latency]
          add_notice("datasource_#{status.name()}_#{TU.to_identifier(ds)}_latency", "Datasource #{status.name()}:#{ds} latency is too high [#{status.replicator_latency(ds)}s] on #{TI.hostname()}")
        end
      }
    }
  end
  
  def check_connector
    unless TI.is_connector?()
      return
    end
    
    allow_elb_connections = false
    if TI.is_running?("connector")
      begin
        Timeout::timeout(@options[:connector_timeout]) do
          if TU.cmd_result("echo \"select 'ALIVE'\" | #{TI.tpm()} connector --skip-column-names") != "ALIVE"
            add_notice("conn_invalid", "Unable to get a successful connection to the connector")
          else
            allow_elb_connections = true
          end
        end
      rescue Timeout::Error
        add_notice("conn_timeout", "Unable to get a response from the connector in #{@options[:connector_timeout]}s")
      end
    end
    
    if @options[:elb_script] != nil
      if allow_elb_connections == true
        if File.exists?("/etc/xinetd.d/disabled/#{@options[:elb_script]}")
          TU.cmd_result("sudo mv /etc/xinetd.d/disabled/#{@options[:elb_script]} /etc/xinetd.d/")
    			TU.cmd_result("sudo service xinetd reload")
    		end
      else
        if File.exists?("/etc/xinetd.d/#{@options[:elb_script]}")
          TU.cmd_result("sudo mv /etc/xinetd.d/#{@options[:elb_script]} /etc/xinetd.d/disabled/")
    			TU.cmd_result("sudo service xinetd reload")
    		end
      end
    end
  end
  
  def check_disk_space()
    begin
      TU.cmd_result("df -HP | grep -vE '^Filesystem|tmpfs|cdrom' | awk '{ print $5 \",\" $1 \",\" $6 }'").split("\n").each{
        |line|
        m = line.match(/([0-9]+)\%,([a-zA-Z0-9\/\-\_\.]+),([a-zA-Z0-9\/\-\_\.]+)/)
        if m
          if m[1].to_f() >= @options[:disk_full_warning]
            add_notice("disk_full_#{TU.to_identifier(m[3])}", "Disk usage for #{m[3]} is #{m[1]}% on #{TI.hostname()}")
          end
        end
      }
    rescue CommandError
      TU.warning("Unable to check disk usage")
    end
  end
  
  def check_max_backup_age
    @options[:dataservices].each{
      |dsname|
      
      TU.debug("Check the maximum backup age of datasources in #{dsname}")
      status = @status[dsname]
      if status == nil
        add_notice("parse_#{dsname}", "Unable to parse status for the #{dsname} service on #{TI.hostname()}")
        next
      end
      if status.is_composite?()
        TU.debug("Skipping service #{dsname} because it is composite")
        next
      end
      
      seconds_since_epoch = TU.cmd_result("date +%s").to_i()
      most_recent_backup = nil

      backup_dir = TI.trepctl_property(status.name(), 'replicator.storage.agent.fs.directory')
      status.replicators().each{
        |ds|
        begin
          TU.ssh_result("stat -c\"%n %Y\" #{backup_dir}/store*.properties 2>/dev/null", ds, TI.user()).split("\n").each{
            |line|
            stored_backup=line.split(" ")
            stored_backup[1] = stored_backup[1].to_i()

            if most_recent_backup == nil || stored_backup[1] > most_recent_backup[:seconds]
              most_recent_backup = {
                :hostname => ds,
                :filename => stored_backup[0],
                :seconds => stored_backup[1]
              }
            end
          }
        rescue CommandError
        end
      }

      if most_recent_backup == nil
        add_notice("backups_missing_#{dsname}", "Unable to find a backup on any datasource in service #{dsname} on #{TI.hostname()}")
      else
        age = seconds_since_epoch-most_recent_backup[:seconds]
        if age > @options[:max_backup_age]
          add_notice("backups_age_#{dsname}", "The most recent backup in service #{dsname}, #{most_recent_backup[:hostname]}:#{most_recent_backup[:filename]} [#{age}s], is older than #{@options[:max_backup_age]}s on #{TI.hostname()}")
        end
      end
    }
  end
  
  def check_logs
    @options[:check_logs].each{
      |id, info|
      path = File.expand_path(info[:path], "#{TI.root()}/#{CURRENT_RELEASE_DIRECTORY}/")
      firstline_path = "#{@options[:lock_dir]}/#{id}.firstline"
      lastlinenum_path = "#{@options[:lock_dir]}/#{id}.lastlinenum"
      
      TU.debug("Check for messages in #{path} as #{id}")
      if File.exist?("#{@options[:lock_dir]}/#{id}.metadata")
        metadata = JSON.parse(File.read("#{@options[:lock_dir]}/#{id}.metadata").strip())
      else
        metadata = {
          "firstline_contents" => nil,
          "lastline_number" => 0
        }
      end
      
      firstline = TU.cmd_result("head -1 #{path}")
      if metadata["firstline_contents"] != nil && firstline != metadata["firstline_contents"]
        TU.debug("Forgetting the last read line for #{path} because this is a different file")
        metadata["lastline_number"] = 0
      end
      metadata["firstline_contents"] = firstline
      
      numlines = TU.cmd_result("wc -l #{path}").split(" ")[0].to_i()
      
      awk = Tempfile.new("awk")
      awk.puts "
BEGIN {
begin = #{metadata["lastline_number"]}
end = #{numlines}
}

NR > end {exit}

NR >= begin {
  print NR \":\" $0
}
"
      awk.flush()
      
      i = 0
      info[:messages].each{
        |msg|
        TU.debug("Read lines #{metadata["lastline_number"]} to #{numlines} of #{path} for #{msg}")
        
        results = TU.cmd_result("awk -f #{awk.path()} #{path} | egrep -e #{msg}").split("\n")

        if results.size() > 0
          add_notice("messages_#{id}_#{i}", "Messages were found in #{TI.hostname()}:#{path} matching #{msg}\n\n" + results.join("\n"), false)
        end
        i = i+1
      }
      
      metadata["lastline_number"] = numlines
      File.open("#{@options[:lock_dir]}/#{id}.metadata", "w") {|f|
        f.puts(JSON.pretty_generate(metadata))
      }
    }
  end
  
  def add_notice(id, msg, write_lock = true)
    TU.debug("Add \"#{msg}\" [#{id}]")
    @notices << {
      :key => id,
      :msg => msg,
      :write_lock => write_lock
    }
  end
  
  def add_check(method)
    @checks << method
  end
  
  def configure
    description("Run Tungsten Nagios checks and send errors to the specified address")
    add_option(:check_logs, {
      :on => "--check-log String",
      :help => ["Email any lines in the log file that match the egrep expression.",
        "--check-log=tungsten-manager/log/tmsvc.log:OFFLINE"],
      :default => []}) {|val| 
      val_parts = val.split(":")
      unless val_parts.size() >= 2
        TU.error("Unable to parse '#{val}'. It should be in the format of '<path>:<message>'")
      end

      # Build an array that is the first part of val and then the remaining
      # parts joined by ':'
      log_info = []
      log_info << val_parts.shift()
      log_info << val_parts.join(":")

      path = log_info[0]
      id = TU.to_identifier(path)
      message = log_info[1]

      unless @options[:check_logs].has_key?(id)
        @options[:check_logs][id] = {
          :path => log_info[0],
          :messages => []
        }
      end
      @options[:check_logs][id][:messages] << log_info[1]

      # Don't automatically add anything to @options[:check_logs]
      return nil
    }
    add_option(:connector_timeout, {
      :on => "--connector-timeout String",
      :parse => method(:parse_integer_option),
      :help => "Number of seconds to wait for a connector response",
      :default => 10
    })
    add_option(:dataservices, {
      :on => "--dataservices String",
      :help => "This list of dataservices to check for latenc or ONLINE errors"}) {|val|
      return val.split(",")
    }
    add_option(:disk_full_warning, {
      :on => "--disk String",
      :help => "Display a warning if any disk usage is above this percentage",
      :default => 80}) {|val|
      if val == "false"
        return false
      else
        return val.to_f()
      end
    }
    add_option(:elb_script, {
      :on => "--elb-script String",
      :help => "The xinetd script name that is responding to ELB liveness checks"
    })
    add_option(:from, {
      :on => "--from String",
      :help => "The from address for sending messages"
    })
    add_option(:ignore_notices, {
      :on => "--ignore String",
      :help => "Ignore notices that use this key",
      :default => []
    })
    add_option(:lock_dir, {
      :on => "--lock-dir String",
      :help => "Directory to store log and lock files in"
    })
    add_option(:lock_timeout, {
      :on => "--lock-timeout String",
      :parse => method(:parse_integer_option),
      :help => "The number of minutes to sleep a notice after sending it",
      :default => 180
    })
    
    default_mail = TU.which("mail")
    if default_mail == nil
      default_mail = TU.which("sendmail")
    end
    
    add_option(:mail, {
      :on => "--mail String",
      :help => "Path to the mail program to use for sending messages",
      :default => default_mail
    })
    
    add_option(:max_backup_age, {
      :on => "--max-backup-age String",
      :parse => method(:parse_integer_option),
      :help => "Maximum age in seconds of valid backups"
    })
    add_option(:max_slave_latency, {
      :on => "--latency String",
      :help => "The maximum allowed latency for replicators",
      :default => 60}) {|val|
      if val == "false"
        return false
      else
        return val.to_f()
      end
    }
    add_option(:reset, {
      :on => "--reset",
      :help => "Remove all entries from the lock directory",
      :default => false
    })
    add_option(:subject, {
      :on => "--subject String",
      :help => "Email subject line"
    })
    add_option(:to, {
      :on => "--email String",
      :help => "Email address to send to when mailing any notifications"
    })
  end
  
  def validate
    if @options[:to] != nil
      if @options[:mail] == nil
        TU.error("Unable to find a mail or sendmail program in the path. Try giving the --mail argument.")
      end
    end
    
    @checks = []
    # Register checks based on the options provided
    add_check(:check_services)
    add_check(:check_online)
    add_check(:check_connector)
    
    unless @options[:max_slave_latency] == false
      add_check(:check_latency)
    end
    
    unless @options[:disk_full_warning] == false
      add_check(:check_disk_space)
    end
    
    unless @options[:max_backup_age] == nil
      add_check(:check_max_backup_age)
    end
    
    add_check(:check_logs)
  end
  
  def script_log_path
    "#{TI.root()}/share/check_tungsten/lastrun.log"
  end
  
  self.new().run()
end