#!/usr/bin/env ruby
#
# This script backs up the datasource on the current host or, if passed
# the optional datasource name, that datasource
#
# The script should be run as the tungsten user to ensure the
# environment is set correctly.  Export the environment variables before
# calling the script to modify behavior
#

require "#{File.dirname(__FILE__)}/../lib/ruby/tungsten"

class ClusterBackup
  include TungstenScript
  
  def main
    topology = TI.status()
    
    unless topology.coordinator() == TI.hostname()
      TU.warning("Not running backup because this node is not the coordinator")
      cleanup(0)
    end

    if @options[:require_automatic_mode] == true && topology.policy() != "AUTOMATIC"
      TU.error("Unable to backup because the cluster is not in AUTOMATIC mode")
      cleanup(1)
    end

    # Find the datasource to backup and make sure it isn't a slave
    # Use the --datasource argument if it was given
    backup_datasource = nil
    if @options[:datasource] != nil
      backup_datasource = @options[:datasource]
      if @options[:require_slave_backup] == true && topology.datasource_role(backup_datasource) == "master"
        TU.error("Unable to backup #{backup_datasource} because it is a master")
        cleanup(1)
      end
      unless topology.datasource_status(backup_datasource) == "ONLINE"
        TU.error("Unable to backup #{backup_datasource} because it is not ONLINE")
        cleanup(1)
      end
    else
      topology.datasources().each{
        |ds|
        if @options[:require_slave_backup] == true && topology.datasource_role(ds) == "master"
          next
        end
        unless topology.datasource_status(ds) == "ONLINE"
          next
        end
      
        backup_datasource=ds
        break
      }
    end
  
    if backup_datasource == nil
      TU.error("Unable to find a datasource to backup")
      cleanup(1)
    end
  
    begin
      if @options[:offline_backup] == true
        TI.ensure_cctrl("datasource #{backup_datasource} shun")
        TI.ensure_cctrl("replicator #{backup_datasource} offline")
      end
    
      if @options[:agent] == nil
        TU.info("Backup #{backup_datasource}")
        TI.ensure_cctrl("datasource #{backup_datasource} backup")
      else
        TU.info("Backup #{backup_datasource} using #{@options[:agent]}")
        TI.ensure_cctrl("datasource #{backup_datasource} backup #{@options[:agent]}")
      end
    
      if @options[:offline_backup] == true
        TI.ensure_cctrl("datasource #{backup_datasource} welcome")
      end
    rescue => e
      debug(e)
      error(e.message())
    
      if @options[:offline_backup] == true
        TI.ensure_cctrl("datasource #{backup_datasource} welcome")
      end
      cleanup(1)
    end
  end

  def configure
    description("Find a slave datasource and take a backup of it. This script will only run on the COORDINATOR so it may be added to crontab on all servers and only one backup will be taken.")

    add_option(:require_automatic_mode, {
      :on => "--require-automatic-mode String",
      :parse => method(:parse_boolean_option),
      :help => "The script will fail if the cluster is not in the AUTOMATIC policy",
      :default => true
    })
    
    add_option(:require_slave_backup, {
      :on => "--require-slave-backup String",
      :parse => method(:parse_boolean_option),
      :help => "The script will fail if the datasource is a master",
      :default => true
    })
    
    add_option(:offline_backup, {
      :on => "--offline-backup String",
      :parse => method(:parse_boolean_option),
      :help => "Should the datasource be put OFFLINE before taking the backup",
      :default => false
    })
    
    add_option(:agent, {
      :on => "--agent String",
      :help => "The replicator backup agent to use when calling `cctrl> datasource <hostname> backup <agent>`"
    })
    
    add_option(:datasource, {
      :on => "--datasource String",
      :help => "The hostname to use for backup. The script will fail if --require-slave-backup is true and this is master."
    })
  end
  
  def validate
    unless TI && TI.is_running?("manager")
      TU.error("Unable to proceed because the manager is not running")
    end
  end
  
  self.new().run()
end