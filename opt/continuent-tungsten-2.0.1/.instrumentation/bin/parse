#!/bin/sh
#
#-------------------------------------------------------------------------------
# Name:     parse    
# Purpose:  Script to parse specific monitoring output files for instrumentation
# Author:   Ronald Bradford  ronald.bradford@continuent.com
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Script Definition
#
SCRIPT_NAME=`basename $0 | sed -e "s/.sh$//"`
SCRIPT_VERSION="0.11 01-NOV-2012"
SCRIPT_REVISION=""

#-------------------------------------------------------------------------------
# Constants - These values never change
#

#-------------------------------------------------------------------------------
# Script specific variables
#



parse_process() {
  local FUNCTION="parse_process()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -eq 0 ] && error "Specify ${CONTINUENT_ROOT}/monitoring files to parse."

  while [ $# -gt 0 ]
  do
    local ARG=$1
    shift
    [ -d "${ARG}" ] && process_dir ${ARG}
    [ -f "${ARG}" ] && process_file ${ARG}
  done

  return 0
}
 
process_mysql_status() {
  local FUNCTION="process_mysql_status()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -ne 3 ] && fatal "${FUNCTION} This function requires three arguments."
  local METRIC="$1"
  [ -z "${METRIC}" ] && fatal "${FUNCTION} \$METRIC is not defined"
  local RESULT_DIR="$2"
  [ -z "${RESULT_DIR}" ] && fatal "${FUNCTION} \$RESULT_DIR is not defined"
  local TIME_OF_DAY="$3"
  [ -z "${TIME_OF_DAY}" ] && fatal "${FUNCTION} \$TIME_OF_DAY is not defined"

  OIFS=$IFS
  for LINE in `cat ${METRIC}`
  do
    IFS=","
    set -- ${LINE}
    KEY=$1
    echo "${TIME_OF_DAY},${EPOCH},$2" >> ${RESULT_DIR}/${KEY}
  #  echo "${EPOCH},$2" >> ${RESULT_DIR}/${KEY}
  done
  IFS=${OIFS}

  return 0
}

process_evaluator_status() {
  local FUNCTION="process_bristlecone_evaluator()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -ne 3 ] && fatal "${FUNCTION} This function requires three arguments ($#)."
  local METRIC="$1"
  [ -z "${METRIC}" ] && fatal "${FUNCTION} \$METRIC is not defined"
  local RESULT_DIR="$2"
  [ -z "${RESULT_DIR}" ] && fatal "${FUNCTION} \$RESULT_DIR is not defined"
  local TIME_OF_DAY="$3"
  [ -z "${TIME_OF_DAY}" ] && fatal "${FUNCTION} \$TIME_OF_DAY is not defined"


  TARGET=${RESULT_DIR}write
  debug ${TARGET}
  [ -f "${TARGET}" ] &&  LAST=`tail -1 ${TARGET} | cut -d, -f2`
  debug "Determined LAST=${LAST} for '${TARGET}'"
  
  grep "ops" ${METRIC} | sed -e "s/ /,/g;s/://g" | awk -F, -v LAST=${LAST} '{ if ($5>LAST) print $1""FS$5FS""($13+$15+$17) }' >> ${TARGET}

  TARGET=${RESULT_DIR}read
  debug ${TARGET}
  [ -f "${TARGET}" ] &&  LAST=`tail -1 ${TARGET} | cut -d, -f2`
  debug "Determined LAST=${LAST} for '${TARGET}'"
  grep "ops" ${METRIC} | sed -e "s/ /,/g;s/://g" | awk -F, -v LAST=${LAST} '{ if ($5>LAST) print $1""FS$5FS""($7) }' >> ${TARGET}


  return 0
}




process_tungsten_datasource() {
  local FUNCTION="process_tungsten_datasource()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -ne 3 ] && fatal "${FUNCTION} This function requires three arguments ($#)."
  local METRIC="$1"
  [ -z "${METRIC}" ] && fatal "${FUNCTION} \$METRIC is not defined"
  local RESULT_DIR="$2"
  [ -z "${RESULT_DIR}" ] && fatal "${FUNCTION} \$RESULT_DIR is not defined"
  local TIME_OF_DAY="$3"
  [ -z "${TIME_OF_DAY}" ] && fatal "${FUNCTION} \$TIME_OF_DAY is not defined"

  local SOURCE_HOST
  local HOST
  local TARGET_RESULT_DR
  local LAST
  local STATE
  local TARGET

  SOURCE_HOST=`dirname ${METRIC} | awk -F'/' '{print $(NF-3)}'`

  for HOST in `cut -d, -f2 ${METRIC} | sort | uniq`
  do
    TARGET_RESULT_DIR=`echo $RESULT_DIR | sed -e "s|/${SOURCE_HOST}/|/${HOST}/|"`
    debug "Generating data for '${HOST}' in '${TARGET_RESULT_DIR}'"
    mkdir -p ${TARGET_RESULT_DIR}
    RC=$?
    [ ${RC} -ne 0 ] && warn "[${RC}] Unable to create directory '${TARGET_RESULT_DIR}'" && continue

    #state
    TARGET="${TARGET_RESULT_DIR}state"
    LAST=""
    STATE=""
    [ -f "${TARGET}" ] &&  LAST=`tail -1 ${TARGET} | cut -d, -f2` && STATE=`tail -1 ${TARGET} | cut -d, -f3`
    debug "Determined LAST=${LAST},STATE=${STATE} for '${TARGET}'"
    grep ${HOST} ${METRIC} | awk -F, -v LAST=${LAST} -v STATE=${STATE} -v TIME_OF_DAY=${TIME_OF_DAY} '{ if ($1>LAST && STATE != $4) { print TIME_OF_DAY""FS$1FS$4; STATE=$4  } }' >> ${TARGET}

  done

  return 0
}

process_tungsten_replicator() {
  local FUNCTION="process_tungsten_replicator()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -ne 3 ] && fatal "${FUNCTION} This function requires three arguments ($#)."
  local METRIC="$1"
  [ -z "${METRIC}" ] && fatal "${FUNCTION} \$METRIC is not defined"
  local RESULT_DIR="$2"
  [ -z "${RESULT_DIR}" ] && fatal "${FUNCTION} \$RESULT_DIR is not defined"
  local TIME_OF_DAY="$3"
  [ -z "${TIME_OF_DAY}" ] && fatal "${FUNCTION} \$TIME_OF_DAY is not defined"

  local SOURCE_HOST
  local HOST
  local TARGET_RESULT_DR
  local LAST
  local STATE
  local TARGET

  SOURCE_HOST=`dirname ${METRIC} | awk -F'/' '{print $(NF-3)}'`

  for HOST in `cut -d, -f2 ${METRIC} | sort | uniq`
  do
    TARGET_RESULT_DIR=`echo $RESULT_DIR | sed -e "s|/${SOURCE_HOST}/|/${HOST}/|"`
    debug "Generating data for '${HOST}' in '${TARGET_RESULT_DIR}'"
    mkdir -p ${TARGET_RESULT_DIR}
    RC=$?
    [ ${RC} -ne 0 ] && warn "[${RC}] Unable to create directory '${TARGET_RESULT_DIR}'" && continue

    # Latency
    TARGET="${TARGET_RESULT_DIR}latency"
    LAST=0
    [ -f "${TARGET}" ] &&  LAST=`tail -1 ${TARGET} | cut -d, -f2`
    debug "Determined LAST=${LAST} for '${TARGET}'"
    grep ${HOST} ${METRIC} | awk -F, -v LAST=${LAST} -v TIME_OF_DAY=${TIME_OF_DAY} '{ if ($1>LAST) print TIME_OF_DAY""FS$1FS$5 }' >> ${TARGET}

    #state
    TARGET="${TARGET_RESULT_DIR}state"
    LAST=""
    STATE=""
    [ -f "${TARGET}" ] &&  LAST=`tail -1 ${TARGET} | cut -d, -f2` && STATE=`tail -1 ${TARGET} | cut -d, -f3`
    debug "Determined LAST=${LAST},STATE=${STATE} for '${TARGET}'"
    grep ${HOST} ${METRIC} | awk -F, -v LAST=${LAST} -v STATE=${STATE} -v TIME_OF_DAY=${TIME_OF_DAY} '{ if ($1>LAST && STATE != $4) { print TIME_OF_DAY""FS$1FS$4; STATE=$4  } }' >> ${TARGET}

    #role
    TARGET="${TARGET_RESULT_DIR}role"
    LAST=""
    STATE=""
    [ -f "${TARGET}" ] &&  LAST=`tail -1 ${TARGET} | cut -d, -f2` && STATE=`tail -1 ${TARGET} | cut -d, -f3`
    debug "Determined LAST=${LAST},role=${STATE} for '${TARGET}'"
    grep ${HOST} ${METRIC} | awk -F, -v LAST=${LAST} -v STATE=${STATE} -v TIME_OF_DAY=${TIME_OF_DAY} '{ if ($1>LAST && STATE != $3) { print TIME_OF_DAY""FS$1FS$3; STATE=$3  } }' >> ${TARGET}

  done

  return 0
}



process_dir() {
  local FUNCTION="process_dir()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -ne 1 ] && fatal "${FUNCTION} This function requires one argument."
  local METRIC_DIR="$1"
  [ -z "${METRIC_DIR}" ] && fatal "${FUNCTION} \$METRIC_DIR is not defined"
  local SERVICE

  info "Processing directory: ${METRIC_DIR}"

  PROCESS_CLASS_SOURCE=`echo ${METRIC_DIR} | awk -F'/' '{print "process_"$(NF-2)"_"$NF}'`

  RC=`grep "^${PROCESS_CLASS_SOURCE}()" $0 |  wc -l`
  [ ${RC} -ne 1 ] && warn "Missing function '${PROCESS_CLASS_SOURCE}' to process metric" && return 0

  SERVICE=`echo ${METRIC_DIR} | awk -F'/' '{print $(NF-1)}'`

  ${PROCESS_CLASS_SOURCE} ${METRIC_DIR}
  RC=$?

  return $?
}

process_file() {
  local FUNCTION="process_file()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -ne 1 ] && fatal "${FUNCTION} This function requires one argument."
  local METRIC="$1"
  [ -z "${METRIC}" ] && fatal "${FUNCTION} \$METRIC is not defined"
  local DAY_OF_YEAR
  local TIME_OF_DAY

  info "Processing file: ${METRIC}"
  data ${METRIC}

  FILE=`basename ${METRIC}`

  DAY_OF_YEAR=`echo ${FILE} | cut -d. -f1`
  TIME_OF_DAY=`echo ${FILE} | cut -d. -f2`
  EPOCH=`echo ${FILE} | cut -d. -f3`

  [ `echo -n ${DAY_OF_YEAR} | wc -c` -eq 6 ] && DAY_OF_YEAR="20${DAY_OF_YEAR}"
  [ `echo -n ${TIME_OF_DAY} | wc -c` -eq 4 ] && TIME_OF_DAY="${TIME_OF_DAY}00"

  local DIR_PATH="${DAY_OF_YEAR}"
  local INSTRUMENT_PART="${TIME_OF_DAY}"

  SERVICE=`dirname ${METRIC} | awk -F'/' '{print $(NF-1)}'`
  HOST_CLASS_SOURCE=`dirname ${METRIC} | awk -F'/' '{print $(NF-3)FS$(NF-2)FS$NF}'`
  PROCESS_CLASS_SOURCE=`dirname ${METRIC} | awk -F'/' '{print "process_"$(NF-2)"_"$NF}'`
  INSTRUMENT_DIR="${LOG_DIR}${SERVICE}/${DIR_PATH}/${HOST_CLASS_SOURCE}/"
  debug "$SERVICE,${HOST_CLASS_SOURCE},${PROCESS_CLASS_SOURCE},${INSTRUMENT_DIR}"
  mkdir -p ${INSTRUMENT_DIR}

  #declare -f ${PROCESS_CLASS_SOURCE} > /dev/null
  #RC=`type ${PROCCESS_CLASS_SOURCE} 2>/dev/null| grep "is a shell function" | wc -l`
  RC=`grep "^${PROCESS_CLASS_SOURCE}()" $0 |  wc -l`
  [ ${RC} -ne 1 ] && warn "Missing function '${PROCESS_CLASS_SOURCE}' to process metric" && return 0


  ${PROCESS_CLASS_SOURCE} ${METRIC} ${INSTRUMENT_DIR} ${TIME_OF_DAY}
  RC=$?

  return ${RC}
}

process_tungsten_state() {
  local FUNCTION="process_tungsten_state()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  local METRIC=$1

  cat ${METRIC} | tr '()@:=/\[\]' ',' | sed -e "s/ //g;s/|//g;/^+/d;/^$/d" | awk -f cctrl.awk > ${METRIC}.csv
  OIFS=$IFS
  for LINE in `cat ${METRIC}.csv`
  do
    IFS=","
    set -- ${LINE}
    KEY=$1
    NODE=$2
    mkdir -p ${INSTRUMENT_DIR}${NODE}
    echo "${INSTRUMENT_PART},${EPOCH},$3" >> ${INSTRUMENT_DIR}/${NODE}/${KEY}
  done
  IFS=${OIFS}

  return 0
}


#------------------------------------------------------------ pre_processing --
# Pre Processing Checks
#
pre_processing() {
  [ -z "${CONTINUENT_ROOT}" ] && error "\$CONTINUENT_ROOT must be defined."
  # This is done intentionally to enable linking of this to a different filesystem
  LOG_DIR="${CONTINUENT_ROOT}/instrumentation/"
  [ ! -d "${LOG_DIR}" ] && warn "\$CONTINUENT_ROOT/instrumentation does not exist, creating." && mkdir $CONTINUENT_ROOT/instrumentation

  return 0
}

#-----------------------------------------------------------------  bootstrap --
# Essential script bootstrap
#
bootstrap() {
  local DIRNAME=`dirname $0`
  local COMMON_SCRIPT_FILE="${DIRNAME}/common"
  [ ! -f "${COMMON_SCRIPT_FILE}" ] && echo "ERROR: You must have a matching '${COMMON_SCRIPT_FILE}' with this script ${0}" && exit 1
  . ${COMMON_SCRIPT_FILE}
  set_base_paths

  return 0
}

#----------------------------------------------------------------------- help --
# Display Script help syntax
#
help() {
  echo ""
  echo "Usage: ${SCRIPT_NAME}.sh [ -q | -v | --help | --version ] <file> [<file>...]"
  echo ""
  echo "  Optional:"
  echo "    -q         Quiet Mode"
  echo "    -v         Verbose logging"
  echo "    --help     Script help"
  echo "    --version  Script version (${SCRIPT_VERSION}) ${SCRIPT_REVISION}"
  echo ""
  echo "  Dependencies:"
  echo "    common"

  return 0
}


#-------------------------------------------------------------- process_args --
# Process Command Line Arguments
#
process_args() {
  check_for_long_args $*
  debug "Processing supplied arguments '$*'"
  while getopts qv OPTION
  do
    case "$OPTION" in
      q)  QUIET="Y";; 
      v)  USE_DEBUG="Y";; 
    esac
  done
  shift `expr ${OPTIND} - 1`

  PARAM_FILES=$*
  [ $# -eq 0 ] && error "Specify files to parse"

  return 0
}

#----------------------------------------------------------------------- main --
# Main Script Processing
#
main () {
  [ ! -z "${TEST_FRAMEWORK}" ] && return 1
  bootstrap
  process_args $*
  pre_processing
  commence
  parse_process ${PARAM_FILES}
  complete

  return 0
}

main $*

# END
