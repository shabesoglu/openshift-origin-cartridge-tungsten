#!/bin/sh
#
#-------------------------------------------------------------------------------
# Name:     scheduler    
# Purpose:  Script to launch monitoring threads
# Author:   Ronald Bradford  ronald.bradford@continuent.com
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Script Definition
#
SCRIPT_NAME=`basename $0 | sed -e "s/.sh$//"`
SCRIPT_VERSION="0.11 01-NOV-2012"
SCRIPT_REVISION=""

#-------------------------------------------------------------------------------
# Constants - These values never change
#

#-------------------------------------------------------------------------------
# Script specific variables
#


 
#--------------------------------------------------------- scheduler_process --
# Primary processing function that reads configuration file
# and launches background threads
#
scheduler_process() {
  local FUNCTION="scheduler_process()"
  [ $# -ne 2 ] && fatal "${FUNCTION} This function requires two arguments."
  local SERVICE="$1"
  [ -z "${SERVICE}" ] && fatal "${FUNCTION} \$SERVICE is not defined"
  local CONFIG="$2"
  [ -z "${CONFIG}" ] && fatal "${FUNCTION} \$CONFIG is not defined"
  local CLASS 
  local SOURCE 
  local TYPE 
  local FREQUENCY 
  local CMD
  local OIFS=${IFS}

  IFS=${TAB}
  while read CLASS SOURCE TYPE FREQUENCY CMD
  do
    # Ignore lines that start with #
    [ -z ${CLASS} -o `echo ${CLASS} | cut -c1` = "#" ] && continue

    info "Launching ${CLASS}/${SOURCE} with ${FREQUENCY} second iterations"
    ${THREAD_BIN} -d ${SERVICE} -m ${CLASS} -s ${SOURCE} -t ${TYPE} -f ${FREQUENCY} -c "${CMD}" &
  done < ${CONFIG}
  IFS=${OIFS}

  return 0
}

#------------------------------------------------------------ pre_processing --
# Pre Processing Checks
#
pre_processing() {
  [ ! -f "${PARAM_CONFIG_FILE}" ] && error "Unable to read configuration from ${PARAM_CONFIG_FILE}"
  THREAD_BIN=${SCRIPT_DIR}/thread
  [ ! -x "${THREAD_BIN}" ] && error "The required thread manager '${THREAD_BIN}' was not found"

  return 0
}

#-----------------------------------------------------------------  bootstrap --
# Essential script bootstrap
#
bootstrap() {
  local DIRNAME=`dirname $0`
  local COMMON_SCRIPT_FILE="${DIRNAME}/common"
  [ ! -f "${COMMON_SCRIPT_FILE}" ] && echo "ERROR: You must have a matching '${COMMON_SCRIPT_FILE}' with this script ${0}" && exit 1
  . ${COMMON_SCRIPT_FILE}
  set_base_paths

  return 0
}

#----------------------------------------------------------------------- help --
# Display Script help syntax
#
help() {
  echo ""
  echo "Usage: ${SCRIPT_NAME}.sh -d <service> -c <config file> [ -q | -v | --help | --version ]"
  echo ""
  echo "  Required:"
  echo "    -d         Data Service"
  echo "    -c         Configuration file"
  echo ""
  echo "  Optional:"
  echo "    -q         Quiet Mode"
  echo "    -v         Verbose logging"
  echo "    --help     Script help"
  echo "    --version  Script version (${SCRIPT_VERSION}) ${SCRIPT_REVISION}"
  echo ""
  echo "  Dependencies:"
  echo "    common"
  echo "    thread"

  return 0
}


#-------------------------------------------------------------- process_args --
# Process Command Line Arguments
#
process_args() {
  check_for_long_args $*
  debug "Processing supplied arguments '$*'"
  while getopts c:d:qv OPTION
  do
    case "$OPTION" in
      c)  PARAM_CONFIG_FILE=${OPTARG};;
      d)  PARAM_SERVICE=${OPTARG};;
      q)  QUIET="Y";; 
      v)  USE_DEBUG="Y";; 
    esac
  done
  shift `expr ${OPTIND} - 1`

  [ -z "${PARAM_CONFIG_FILE}" ] && PARAM_CONFIG_FILE=${DEFAULT_CNF_FILE}
  [ -z "${PARAM_SERVICE}" ] && error "A data service must be specified with -d. See --help for more details."

  return 0
}

#----------------------------------------------------------------------- main --
# Main Script Processing
#
main() {
  [ ! -z "${TEST_FRAMEWORK}" ] && return 1
  bootstrap
  process_args $*
  pre_processing
  commence
  scheduler_process ${PARAM_SERVICE} ${PARAM_CONFIG_FILE}
  complete

  return 0
}

main $*

# END
