#!/bin/sh
#
#-------------------------------------------------------------------------------
# Name:     thread    
# Purpose:  Script to run monitoring threads
# Author:   Ronald Bradford  ronald.bradford@continuent.com
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Script Definition
#
SCRIPT_NAME=`basename $0 | sed -e "s/.sh$//"`
SCRIPT_VERSION="0.11 01-NOV-2012"
SCRIPT_REVISION=""

#-------------------------------------------------------------------------------
# Constants - These values never change
#
MYSQL="mysql"
MYSQL_OPTIONS="-A --silent"

#-------------------------------------------------------------------------------
# Script specific variables
#



#------------------------------------------------------------ thread_process --
# Primary processing function that runs a given thread
# and launches background threads
#
thread_process() {
  local FUNCTION="thread_process()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -ne 6 ] && fatal "${FUNCTION} This function requires size arguments (Got $#)."
  local SERVICE="$1"
  [ -z "${SERVICE}" ] && fatal "${FUNCTION} \$SERVICE is not defined"
  local CLASS="$2"
  [ -z "${CLASS}" ] && fatal "${FUNCTION} \$CLASS is not defined"
  local SOURCE="$3"
  [ -z "${SOURCE}" ] && fatal "${FUNCTION} \$SOURCE is not defined"
  local TYPE="$4"
  [ -z "${TYPE}" ] && fatal "${FUNCTION} \$TYPE is not defined"
  local FREQUENCY="$5"
  [ -z "${FREQUENCY}" ] && fatal "${FUNCTION} \$FREQUENCY is not defined"
  local CMD="$6"
  [ -z "${CMD}" ] && fatal "${FUNCTION} \$CMD is not defined"

  STOP_FILE="${LOG_DIR}.stop.${CLASS}.${SOURCE}"

  while [ ! -f "${STOP_FILE}" ] 
  do
    #EPOCH=`date +%s`  
    DT=`date +%Y%m%d.%H%M%S.%s%N | cut -c1-29`
    METRIC="${SHORT_HOSTNAME}/${CLASS}/${SERVICE}/${SOURCE}/${DT}"
    [ "${TYPE}" = "SQL" ] && run_mysql "${CMD}" "${METRIC}"
    [ "${TYPE}" = "SH" ] && run_sh "${CMD}" "${METRIC}"
    sleep ${FREQUENCY}
  done

  [ -f "${STOP_FILE}" ]  && warn "Thread stopped due to '${STOP_FILE}'. Remove to restart thread" && cleanup_exit 1

  return 0
}

run_sh() {
  local CMD="$1"
  local METRIC="$2"

  FILE="${LOG_DIR}${METRIC}.txt"
  mkdir -p `dirname ${FILE}`
  data "${FILE}"

  eval ${CMD} > ${FILE} 
  RC=$?
  [ $RC -ne 0 ] && warn "Running the shell statement '${CMD}' produced an error"
  return ${RC}
}

run_mysql() {
  local SQL="$1"
  local METRIC="$2"

  FILE="${LOG_DIR}${METRIC}.csv"
  mkdir -p `dirname ${FILE}`
  data "${FILE}"

  ${MYSQL} ${MYSQL_OPTIONS} -e "${SQL}" > ${FILE} 
  RC=$?
  [ $RC -ne 0 ] && warn "Running the MySQL statement '${SQL}' produced an error"
  CURRENT=`dirname ${FILE}`/current
  PREVIOUS=`dirname ${FILE}`/previous
  [ -f ${CURRENT} ] && mv ${CURRENT} ${PREVIOUS}
  ln -s ${FILE} ${CURRENT}
  return ${RC}
}

generate_mysql_authentication() {
  local MYSQL_USER
  local MYSQL_PASSWD
  local MYSQL_PORT
  local MYSQL_HOST
  local CFG="${CONTINUENT_ROOT}/conf/tungsten.cfg"

  # //TODO This is a hack.  Ideally need a ruby wrapper to provide connection details
  # //TODO Enable a $CNF_DIR/my.cnf override
  [ ! -f "${CFG}" ] && error "Unable to find '${CFG}' for MySQL authentication"

  MYSQL_USER=`grep repl_datasource_user ${CFG} | head -1 | cut -d'"' -f4`
  MYSQL_PASSWD=`grep repl_datasource_password ${CFG} | head -1 | cut -d'"' -f4`
  MYSQL_PORT=`grep repl_datasource_port ${CFG} | head -1 | cut -d'"' -f4`
  MYSQL_HOST=`grep repl_datasource_host ${CFG} | head -1 | cut -d'"' -f4`
  [ -z "${MYSQL_USER}" -o -z "${MYSQL_PASSWD}" -o -z "${MYSQL_PORT}"  -o -z "${MYSQL_HOST}" ] && error "Unable to determine MySQL authentication from '${CFG}'"

  MYSQL_OPTIONS="${MYSQL_OPTIONS} -u${MYSQL_USER} -p${MYSQL_PASSWD} -P${MYSQL_PORT} -h${MYSQL_HOST}"
  debug "MYSQL_OPTIONS='${MYSQL_OPTIONS}'"

  
  return 0
}

#------------------------------------------------------------ pre_processing --
# Pre Processing Checks
#
pre_processing() {
  [ -z "${CONTINUENT_ROOT}" ] && error "\$CONTINUENT_ROOT must be defined."
  # This is done intentionally to enable linking of this to a different filesystem
  LOG_DIR="${CONTINUENT_ROOT}/monitoring/"
  [ ! -d "${LOG_DIR}" ] && warn "\$CONTINUENT_ROOT/monitoring does not exist, creating." && mkdir $CONTINUENT_ROOT/monitoring
  [ -z `which ${MYSQL} 2>/dev/null` ] && error "Unable to find ${MYSQL} in the path"

  generate_mysql_authentication

  return 0
}

#-----------------------------------------------------------------  bootstrap --
# Essential script bootstrap
#
bootstrap() {
  local DIRNAME=`dirname $0`
  local COMMON_SCRIPT_FILE="${DIRNAME}/common"
  [ ! -f "${COMMON_SCRIPT_FILE}" ] && echo "ERROR: You must have a matching '${COMMON_SCRIPT_FILE}' with this script ${0}" && exit 1
  . ${COMMON_SCRIPT_FILE}
  set_base_paths

  return 0
}

#----------------------------------------------------------------------- help --
# Display Script help syntax
#
help() {
  echo ""
  echo "Usage: ${SCRIPT_NAME}.sh  -d <service> [ -q | -v | --help | --version ] <class> <source>  <type> <frequency> \"<cmd>\" "
  echo ""
  echo "  Required:"
  echo "    -d         Data Service Name"
  echo "    -m         Metric Class" 
  echo "    -s         Metric Source" 
  echo "    -t         Metric Command Type" 
  echo "    -f         Metric Frequency" 
  echo "    -c         Metric Command" 
  echo ""
  echo "  Optional:"
  echo "    -q         Quiet Mode"
  echo "    -v         Verbose logging"
  echo "    --help     Script help"
  echo "    --version  Script version (${SCRIPT_VERSION}) ${SCRIPT_REVISION}"
  echo ""
  echo "  Dependencies:"
  echo "    common"

  return 0
}

#-------------------------------------------------------------- process_args --
# Process Command Line Arguments
#
process_args() {
  check_for_long_args $*
  debug "Processing supplied arguments '$*'"
  while getopts d:m:s:t:f:c:qv OPTION
  do
    case "$OPTION" in
      d)  PARAM_SERVICE=${OPTARG};;
      m)  PARAM_CLASS=${OPTARG};;
      s)  PARAM_SOURCE=${OPTARG};;
      t)  PARAM_TYPE=${OPTARG};;
      f)  PARAM_FREQ=${OPTARG};;
      c)  PARAM_CMD="${OPTARG}";;
      q)  QUIET="Y";; 
      v)  USE_DEBUG="Y";; 
    esac
  done
  shift `expr ${OPTIND} - 1`

  [ -z "${PARAM_SERVICE}" ] && error "A data service must be specified with -d. See --help for details"
  [ -z "${PARAM_CLASS}" ] && error "A metric class must be specified with -m. See --help for details"
  [ -z "${PARAM_SOURCE}" ] && error "A metric source must be specified with -s. See --help for details"
  [ -z "${PARAM_TYPE}" ] && error "A metric type must be specified with -t. See --help for details"
  [ -z "${PARAM_FREQ}" ] && error "A metric frequency must be specified with -f. See --help for details"
  [ -z "${PARAM_CMD}" ] && error "A metric command must be specified with -c. See --help for details"

  return 0
}

#----------------------------------------------------------------------- main --
# Main Script Processing
#
main() {
  [ ! -z "${TEST_FRAMEWORK}" ] && return 1
  bootstrap
  process_args "$@"
  pre_processing
  commence
  thread_process ${PARAM_SERVICE} ${PARAM_CLASS} ${PARAM_SOURCE} ${PARAM_TYPE} ${PARAM_FREQ} "${PARAM_CMD}"
  complete

  return 0
}

main "$@"

# END
