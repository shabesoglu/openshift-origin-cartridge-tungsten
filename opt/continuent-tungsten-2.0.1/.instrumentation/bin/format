#!/bin/sh
#
#-------------------------------------------------------------------------------
# Name:     format    
# Purpose:  Format parsed output as JS arrays
# Author:   Ronald Bradford  ronald.bradford@continuent.com
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Script Definition
#
SCRIPT_NAME=`basename $0 | sed -e "s/.sh$//"`
SCRIPT_VERSION="0.10 30-OCT-2012"
SCRIPT_REVISION=""

#-------------------------------------------------------------------------------
# Constants - These values never change
#

#-------------------------------------------------------------------------------
# Script specific variables
#
[ -z "${DATA_POINTS}" ] && DATA_POINTS=100



 
#------------------------------------------------------------ format_process --
#
format_process() {
  local FUNCTION="format_process()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -lt 6 ] && fatal "${FUNCTION} This function requires at least six arguments."
  local GROUP="$1"
  shift
  [ -z "${GROUP}" ] && fatal "${FUNCTION} \$GROUP is not defined"
  local FORMAT="$1"
  shift
  [ -z "${FORMAT}" ] && fatal "${FUNCTION} \$FORMAT is not defined"
  local OUTPUT_FILE="$1"
  shift
  [ -z "${OUTPUT_FILE}" ] && fatal "${FUNCTION} \$OUTPUT_FILE is not defined"
  local LABELS="$1"
  shift
  [ -z "${LABELS}" ] && fatal "${FUNCTION} \$LABELS is not defined"
  local COLORS="$1"
  shift
  [ -z "${COLORS}" ] && fatal "${FUNCTION} \$COLORS is not defined"

  local PLOT_ARRAY=""
  local INPUT_FILE
  info "Creating '${OUTPUT_FILE}'"
  > ${OUTPUT_FILE}
  local POS=1
  while [ $# -gt 0 ]
  do
    INPUT_FILE=$1
    shift
    [ ! -f "${INPUT_FILE}" ] && warn "Unable to find metric '${INPUT_FILE}'" && continue
    METRIC=`dirname ${INPUT_FILE} | awk -F'/' '{print $(NF-2)}'`"_"`basename ${INPUT_FILE}`
    #METRIC=`basename ${INPUT_FILE}`
    PLOT_ARRAY="${PLOT_ARRAY}${METRIC}_a,"

    LABEL=`echo ${LABELS} | cut -d, -f${POS}`
    COLOR=`echo ${COLORS} | cut -d, -f${POS}`
    generate_js ${INPUT_FILE} ${FORMAT} ${GROUP} ${LABEL} ${COLOR} ${OUTPUT_FILE}
    POS=`expr ${POS} + 1`
  done

  if [ "${FORMAT}" != "value" ] 
  then
    echo "var plot${GROUP}=[${PLOT_ARRAY}];" >> ${OUTPUT_FILE}
  fi

  return 0
}

generate_js() {
  local FUNCTION="generate_js()"
  debug "${FUNCTION} \$#=$# \$*=$*"
  [ $# -ne 6 ] && fatal "${FUNCTION} This function requires six arguments."
  local METRIC_FILE="$1"
  [ -z "${METRIC_FILE}" ] && fatal "${FUNCTION} \$METRIC_FILE is not defined"
  local FORMAT=$2
  [ -z "${FORMAT}" ] && fatal "${FUNCTION} \$FORMAT is not defined"
  local GROUP=$3
  [ -z "${GROUP}" ] && fatal "${FUNCTION} \$GROUP is not defined"
  local LABEL=$4
  [ -z "${LABEL}" ] && fatal "${FUNCTION} \$LABEL is not defined"
  local COLOR=$5
  [ -z "${COLOR}" ] && fatal "${FUNCTION} \$COLOR is not defined"
  local OUTPUT_FILE=$6
  [ -z "${OUTPUT_FILE}" ] && fatal "${FUNCTION} \$OUTPUT_FILE is not defined"

  LINES=`cat ${METRIC_FILE} | wc -l`
  echo "//Processing ${METRIC} (${DATA_POINTS} of ${LINES} lines)" >> ${OUTPUT_FILE}

  if [ "${FORMAT}" = "diff" ] 
  then
# Delta has to downgrade to per second, that is a diff of values, but in time, not subtraction. EPOCH solves
    tail -${DATA_POINTS} ${METRIC_FILE} | awk -F, 'NR < 2 {e=$2;v=$3} NR > 1 {printf("%s,%.2f\n", $2,($3 - v)/(($2 - e)/1000.0));e=$2;v=$3}' > ${TMP_FILE}
  elif [ "${FORMAT}" = "value" ]
  then
    DETAILS=`tail -1 ${METRIC_FILE}`
    #LABEL=`echo ${METRIC_FILE} | awk -F'/' '{print $(NF-1)"_"$NF}'`
    EPOCH=`echo ${DETAILS} | cut -d, -f2`
    VALUE=`echo ${DETAILS} | cut -d, -f3`
    echo "var plot${GROUP}= { label: \"${LABEL}\", epoch: ${EPOCH}, status: \"${VALUE}\" };" >> ${OUTPUT_FILE}
    return 0

    #tail -1 ${METRIC_FILE} 
  else # if [ "${FORMAT}" = "asis"
    tail -${DATA_POINTS} ${METRIC_FILE}  | cut -d, -f2,3 > ${TMP_FILE}
  fi

  sed -e "s/^/[/;s/$/],/;$ a\
];
1i\
  var ${METRIC} = [" ${TMP_FILE} >> ${OUTPUT_FILE}

  echo "var ${METRIC}_a={data:${METRIC}, color: '${COLOR}', label: '${LABEL}'};" >> ${OUTPUT_FILE}

  debug_file "Output" ${OUTPUT_FILE}
  return 0

}



#------------------------------------------------------------ pre_processing --
# Pre Processing Checks
#
pre_processing() {
  return 0
}

#-----------------------------------------------------------------  bootstrap --
# Essential script bootstrap
#
bootstrap() {
  local DIRNAME=`dirname $0`
  local COMMON_SCRIPT_FILE="${DIRNAME}/common"
  [ ! -f "${COMMON_SCRIPT_FILE}" ] && echo "ERROR: You must have a matching '${COMMON_SCRIPT_FILE}' with this script ${0}" && exit 1
  . ${COMMON_SCRIPT_FILE}
  set_base_paths

  return 0
}

#----------------------------------------------------------------------- help --
# Display Script help syntax
#
help() {
  echo ""
  echo "Usage: ${SCRIPT_NAME}.sh -g <plot> -f <format>  -o <output> [ -t <n> | -d <n> | -p <n> -s | -q | -v | --help | --version ]"
  echo ""
  echo "  Required:"
  echo "    -g         Plot Group [1-n]" 
  echo "    -f         Plot Format [asis,diff]"
  echo "    -o         Output File"
  echo ""
  echo "  Optional:"
  echo "    -t         Epoch Column (Default is 1)"
  echo "    -d         Data Column (Default is 2)"
  echo "    -s         Time in seconds (not milliseconds)"
  echo "    -p         Data points to plot (Default ${DATA_POINTS})"
  echo "    -q         Quiet Mode"
  echo "    -v         Verbose logging"
  echo "    --help     Script help"
  echo "    --version  Script version (${SCRIPT_VERSION}) ${SCRIPT_REVISION}"
  echo ""
  echo "  Dependencies:"
  echo "    common"

  return 0
}


#-------------------------------------------------------------- process_args --
# Process Command Line Arguments
#
process_args() {
  check_for_long_args $*
  debug "Processing supplied arguments '$*'"
  while getopts c:l:g:f:t:d:o:p:sqv OPTION
  do
    case "$OPTION" in
      g)  PARAM_GROUP=${OPTARG};;
      f)  PARAM_FORMAT=${OPTARG};;
      o)  PARAM_OUTPUT_FILE=${OPTARG};;
      c)  PARAM_COLORS=${OPTARG};;
      l)  PARAM_LABELS=${OPTARG};;
      p)  DATA_POINTS=${OPTARG};;
      q)  QUIET="Y";; 
      v)  USE_DEBUG="Y";; 
    esac
  done
  shift `expr ${OPTIND} - 1`


  [ -z "${PARAM_GROUP}" ] && error "Plot group must be specified with -g. Use --help for details"
  [ -z "${PARAM_FORMAT}" ] && error "Plot format must be specified with -f. Use --help for details"
  [ -z "${PARAM_OUTPUT_FILE}" ] && error "Output file must be specified with -o. Use --help for details"
  PARAM_FILES=$*

  [ -z "${PARAM_FILES}" ] && error "You must specific at least one metric to format"

  return 0
}

#----------------------------------------------------------------------- main --
# Main Script Processing
#
main() {
  [ ! -z "${TEST_FRAMEWORK}" ] && return 1
  bootstrap
  process_args $*
  pre_processing
  commence
  format_process ${PARAM_GROUP} ${PARAM_FORMAT} ${PARAM_OUTPUT_FILE} ${PARAM_LABELS} ${PARAM_COLORS} ${PARAM_FILES}
  complete

  return 0
}

main $*

# END
