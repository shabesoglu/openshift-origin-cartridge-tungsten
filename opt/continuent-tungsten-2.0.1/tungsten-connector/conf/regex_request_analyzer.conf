################################################################################
# Regular expressions definition for request analysis
# Two kinds of regular expressions can be defined here: 
#  . Either "exact match" where a connection quality of service will be applied 
     when the given regular expression is matched
#  . Or "embedded" where the connection QoS is provided in the request. The
#    regular expression points-out the group containing the connection type 
#
# Note that patterns are java patterns and need to be properly escaped to make a
# valid java string (see examples). They are compiled with flags 
# "CASE_INSENSITIVE" and "DOTALL"
# For more information see java Pattern documentation at:
# http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html
#
# Regular expressions will be matched in the alphabetical order of their name.
# The first regular expression matching the SQL wins
#
# Syntax:
# <name>.regex=<java regex>
# <name>.type=<EXACT_MATCH|EMBEDDED>
# <name>.isRead=<true|false>
# <name>.qos=<RW_STRICT|RW_SESSION|RO_RELAXED|UNDEFINED>
# <name>.group=<group #>
# <name>.persistent=<true|false>
# <name>.inTx=<true|false>
# <name>.truncated=<true|false>
#
# Where:
# regex:      regular expression properly escaped
# type:       type of regex, either exact match or embedded - defaults to 
#             exactMatch
# isRead:     whether the request should be treated as a read (this is currently 
#             only used with smart scale) - defaults to false
# qos:        only for exact match type, the quality of service to apply if the 
#             regular expression is matched
# group:      only for embedded type, the (regular expression pattern matching) 
#             group in which to find the embedded QoS
# persistent: whether the given QoS should be retained for subsequent requests
#             until another QoS is specified
# inTx:       whether to apply the QoS to requests inside transaction
#             boundaries or with existing temporary tables. Defaults to false
# truncated:  whether to apply the QoS to request larger than 16M
################################################################################

############
# Example 1:
# Simple, direct, read-write splitting, all reads go to slaves
simple.regex=^\\s*(select|show)(?!.*for\\s+update).*$
simple.type=EXACT_MATCH
simple.qos=RO_RELAXED
simple.isRead=true

############
# Example 2:
# smart scale: read-write splitting where reads will go as much as 
# possible to slaves, provided the latest write of the session has been 
# replicated:
smartScale.regex=^\\s*(select|show)(?!.*for\\s+update).*$
smartScale.type=EXACT_MATCH
smartScale.qos=RW_SESSION
smartScale.isRead=true

############
# Example 3:
# Advanced use with embedded QoS. Requests like 
#    /* TUNGSTEN USE RO_RELAXED */ select * from t;
# will be sent to a slave
inlineComment.regex=^/\\*\\s*TUNGSTEN\\s+USE\\s+(.*)\\s*\\*/
inlineComment.type=EMBEDDED
inlineComment.group=1

############
# Example 4:
# Use of persistent QoS, where single line comments can force a QoS by issuing a
# request like:
#    -- TUNGSTEN USE RO_RELAXED
oneLineComment.regex=^(//|--)\\s*TUNGSTEN\\s+USE\\s+(.*)
oneLineComment.type=EMBEDDED
oneLineComment.group=2
oneLineComment.persistent=true