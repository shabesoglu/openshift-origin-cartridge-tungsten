# ROUTER CONFIGURATION PROPERTIES
#
# All values found for parameters in this file are the defaults, 
# unless otherwise specified in the parameter description.
#
#
# used to set up JMX connectivity via a service name
#
serviceName=router
#
# host name for JMX connectivity - should be the name
# of the host on which the router will be deployed
#
host=localhost
#
# port for JMX connectivity.  The router will attempt to bind
# this port for a JMX registry at startup. This makes it possible
# for other components to contact the registry, on this port,
# and to get information/bind to the JMX bean.
#
port=<%= ENV['OPENSHIFT_TUNGSTEN_ROUTER_JMX_PORT'] %>
#
# Indicates whether or not the router should enable connection
# requests to be processed when it first starts up i.e. automatically.
# If set to false, what the router will do will depend on the 
# configuration for waitIfDisabled.  If set to true, the
# router will attempt to handle all connection requests.
#
autoEnable=true
#
# When taking the router or a dataSource to offline, indicates whether or
# not the router should wait for all active connections to disconnect. 
# When set to true, the router will wait for up to waitForDisconnectTimeout
# seconds before otherwise going offline.  If connections still exist
# after the timeout interval, they are forced closed.
#
# If false, any active connections that may exist at the time the router
# or datasource is commanded to go offline will be forced closed immediately.
#
waitForDisconnect=true
#
# Wait for the number of seconds specified if waiting for active
# connections to disconnect, then close any remaining active connections.
# This option is only used if waitForDisconnect=true
waitForDisconnectTimeout=<%= ENV['OPENSHIFT_TUNGSTEN_ROUTER_WAITFOR_DISCONNECT_TIMEOUT'] %>
#
# A full path reference to a directory containing resource property files. 
# If you use variable $them{cluster.home}, but the value must be set on startup 
# using -Dcluster.home=<path to router director>. 
#
clusterHome=${cluster.home}

#
# The name of the cluster for which this router is being configured
#
clusterName=<%= ENV['OPENSHIFT_TUNGSTEN_DATASERVICENAME'] %>

#
# The name of a file, which should be located in $clusterHome/conf, and which
# contains the properties required for the monitoring gc
#
hedera_properties=hedera.monitoring.properties
#
#
# Determines whether or not the master should be included in the
# round robin for read-only connections.
#
rrIncludeMaster=false
#
# Whether or not to wait if a given type of dataSource is unavailable i.e.
# if RW_STRICT, wait for a master database to become available etc.  If
# set to true, the router will wait for up to the time period specified
# by waitIfUnavailableTimeout to make a connection for a given qos.  If
# the timeout expires, the router will throw a SQLException.
#
# If this parameter is set to false, the router will immediately throw
# a SQLException if a connection for a given qos cannot be made immediately.
#
waitIfUnavailable=true
#
# If waitIfUnavailable=true, the router will wait for up to this number
# of seconds before throwing a SQLException.  Otherwise, this parameter
# is ignored.  If set to zero, the router will wait indefinitely.
#
waitIfUnavailableTimeout=0
#
# If the router is offline, whether or not to suspend connection requests
# or to reject them with a SQLException.  If set to true, the router will
# wait up to waitIfDisabledTimeout seconds before throwing the SQLException.
# Otherwise, it will throw a SQLException immediately if the connection
# request cannot be fulfilled.
waitIfDisabled=true
#
#
# If waitIfDisabled=true, this parameter indicates how many seconds to 
# wait for a connection of the appropriate type to become available before
# throwing a SQLException. The value zero means to wait forever.  This
# parameter is ignored if waitIfDisabled=false
#
waitIfDisabledTimeout=0
#
# Defines the maximum acceptable data source latency. Data source above this latency 
# will not be selected for connections. Can be overriden on a per-connection basis
# using URL option maxAppliedLatency. Not defining or giving a negative value here
# is interpreted as 'disable latency selection' (however, URL option is given priority)
#
maxAppliedLatency=-1
#
# The name of a class to load and which can monitor state transitions of the
# router. No class is required to be loaded.
#
routerListenerClass=com.continuent.tungsten.router.adaptor.DriverNotificationListener
#
# Class names of load balancers for each QOS. When unspecified, the DefaultLoadBalancer 
# will be used
#
dataSourceLoadBalancer_RO_RELAXED=com.continuent.tungsten.router.resource.loadbalancer.MostAdvancedSlaveLoadBalancer
dataSourceLoadBalancer_RW_STRICT=com.continuent.tungsten.router.resource.loadbalancer.DefaultLoadBalancer
dataSourceLoadBalancer_RW_SESSION=com.continuent.tungsten.router.resource.loadbalancer.HighWaterSlaveLoadBalancer

#
# When set to true, this will make the manager and router use a new, non-JMX protocol
# which allows running multiple instances of the sql-router on a single host
#
useNewProtocol=true
#
# Port on which the manager listens to incoming router connections. Only applicable
# when the above useNewProtocol flag is set to true
#
routerGatewayPort=<%= ENV['OPENSHIFT_TUNGSTEN_ROUTER_GATEWAY_PORT'] %>
#
# List of managers to connect to as <host>[:<port>] entries, comma-separated
# Example: 
# managerList=host1,host2:11999
# Note that default "localhost" will fit most environments running collocated 
# sql-router and manager
# 
managerList=<%= ENV['OPENSHIFT_TUNGSTEN_DATASERVICE_MEMBERS'] %>
#
# When the router looses connection to managers, it will no longer be updated
# with the cluster status (online/offline data sources, master/slave states).
# The client application can thus try to read (or write!) from outdated or 
# inconsistent data sources
# With this variable, you can configure the number of seconds you would like the
# router to wait before going offline by itself, preventing new client 
# connections from being established.
# A negative value disables this behavior (the router will never go offline), 
# and allows for forcing the router to start with its last known/on-disk 
# configuration
#
delayBeforeOfflineIfNoManager=<%= ENV['OPENSHIFT_TUNGSTEN_ROUTER_DELAY_BEFORE_OFFLINE'] %>
#
# Delay (in ms) after which a manager connection is considered broken if no
# keep-alive command was received. Value must be positive and lower than
# 300000 (5 min) or the connector will refuse to start.
# Make sure the manager has "manager.notifications.send" set to
# true this value is greater than the "frequency"
# defined in tungsten-monitor/conf/checker.tungstenreplicator.properties
#
keepAliveTimeout=<%= ENV['OPENSHIFT_TUNGSTEN_ROUTER_KEEP_ALIVE_TIMEOUT'] %>
#
# Determines whether the reported latency is relative or absolute.
#
showRelativeLatency=false

#
# This property is primarily for testing purposes.  It can be used to force a router
# to create more than one router gateway thread per data service.  
#
routerClientThreadsPerService=1

#
# When connecting to a manager, how long to wait for the connection to
# succeed before trying the next manager in line. Default 5s, must be
# positive and max 30s
#
gatewayConnectTimeoutMs=5000

#
# When choosing a connection pool here, every unique URL used for connecting 
# will have a backing connection pool.  This option is best used when the number
# of unique URL is relatively small - for example, a SaaS application that
# has a small number of users who execute logic on behalf of the actual users.
# The default is to have connection pooling turned off.
#
# No connection pooling:
connectionProviderClass=com.continuent.tungsten.router.resource.UnpooledConnectionProvider
# c3p0 pool:
#connectionProviderClass=com.continuent.tungsten.router.resource.C3P0PooledConnectionProvider
# BoneCP pool:
#connectionProviderClass=com.continuent.tungsten.router.resource.BoneCPPooledConnectionProvider
